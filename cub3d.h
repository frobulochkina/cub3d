#ifndef CUB3D_H
# define CUB3D_H
# include "minilibx_opengl/mlx.h"
# include <stdio.h>
# include <math.h>
# include "get_next_line/get_next_line.h"
# include <fcntl.h>
# include <unistd.h>
# include <stdlib.h>
# include <string.h>

typedef struct s_vars {
	char			plr_direction;
	void			*mlx;
	void			*win;
	unsigned int	color;
	char			**arr_map;
	double			**array_sprite;
	double			*zBuffer;
	int				width;
	int				height;
	char			*position;
	int				floor_r;
	int				floor_g;
	int				floor_b;
	int				position_str_r;
	int				position_str_f;
	int				position_str_c;
	int				count_comma;
	int				ceilling_r;
	int				ceilling_g;
	int				ceilling_b;
	char			*no_path;
	char			*we_path;
	char			*ea_path;
	char			*so_path;
	char			*s_path;
	int				count_lines;
	int				count_sprites;
	double			plr_mas_x;
	double			plr_mas_y;
	int				error;
	double			posX;
	double			posY;
	double			dirX;
	double			dirY;
	double			planeX;
	double			planeY;
	int				drawStart;
	int				drawEnd;
	int				mapX;
	int				mapY;
	double			sideDistX;
	double			sideDistY;
	double			deltaDistX;
	double			deltaDistY;
	double			perpWallDist;
	int				stepX;
	int				stepY;
	double			cameraX;
	double			rayDirX;
	double			rayDirY;
	int				lineHeight;
	void			*img;
	void			*img_tex;
	char			*addr;
	char			*addr_tex;
	int				bits_per_pixel;
	int				bits_per_pixel_tex;
	int				line_length;
	int				line_length_tex;
	int				endian;
	int				endian_tex;
	char			hit;
	char			side;
	int				key_w;
	int				key_s;
	int				key_a;
	int				key_d;
	int				key_l;
	int				key_r;
	int				sprites;
	int				texHeight;
	int				texWidth;
	char			*resolution_pos;
	char			*floor_pos;
	char			*ceilling_pos;
	double			wall_x;
	double			oldDirX;
	double			oldPlaneX;
	int				stripe;
	double			sprite_x;
	double			sprite_y;
	double			inv_det;
	double			transform_x;
	double			transform_y;
	int				sprite_screen_x;
	int				v_move_screen;
	int				sprite_height;
	int				draw_start_y;
	int				draw_end_y;
	int				sprite_width;
	int				draw_start_x;
	int				draw_end_x;
	int				end;
	int				len_now;
	int				len_prew;
	char			*line_all;
	char			*str_with_n;
	int				check;
	int				texX;
	int				texY;
	int				d;
	int				number_c;
	int				number_f;
	int				count;
	char			*argc_one;
	int				count_dot;
}				t_vars;

typedef struct s_data {
	double		first;
	int			second;
}				t_data;

int		ft_check_int(t_vars *box);
int		ft_error(t_vars *box);
void	ft_allstruct_init(t_vars *box);
void	check_beginning_str(t_vars *box, char *line, char flag);
int		check_trash_inside_end(t_vars *box, char c, char flag);
void	check_r(t_vars *box, char *line);
void	check_f(t_vars *box, char *line);
void	check_c(t_vars *box, char *line);
int		check_n_w_e_s(t_vars *box, char *line);
void	meet_n(t_vars *box, char *line);
void	meet_w(t_vars *box, char *line);
void	meet_e(t_vars *box, char *line);
void	meet_s(t_vars *box, char *line);
int		check_line_texture(t_vars *box, char *line);
int		all_step(t_vars *box, int argc);
void	where_the_wall_hit(t_vars *box);
void	verline(t_vars *box, int x);
int		rgb_ceilling(t_vars *box);
int		rgb_floor(t_vars *box);
void	draw_map(t_vars *box);
int		atoi_floor(char *str, t_vars *box, int i);
int		atoi_ceilling(char *str, t_vars *box, int i);
int		ft_atoi_for_resolution(char *str, t_vars *box, int i);
void	my_mlx_pixel_put(t_vars *box, int x, int y, int color);
int		my_mlx_pixel_put_get(t_vars *box, int x, int y);
void	verline_ceilling_floor(t_vars *box, int x, int color);
void	draw_floor_and_ceilling(t_vars *box, int x);
void	calculate_step_and_init_sideDist(t_vars *box);
void	dda(t_vars *box);
void	not_fish_eye_plus_height_wall(t_vars *box);
int		when_len_prew(t_vars *box, int i, int j, char **arr_map);
int		map_check(char **arr_map, t_vars *box, int i, int j);
int		check_valid(char **arr_map, t_vars *box);
int		check_valid_sim(char **arr_map);
int		check_line(t_vars *box, char *line);
char	ft_strchr_i(const char *s, int c);
void	resolution_reading(char *line, t_vars *box);
void	check_last_place_after_all_arg(t_vars *box, char flag);
void	floor_reading(char *line, t_vars *box);
void	ceilling_reading(char *line, t_vars *box);
void	s_reading(t_vars *box);
void	no_reading(t_vars *box);
void	ea_reading(t_vars *box);
void	so_reading(t_vars *box);
void	we_reading(t_vars *box);
void	splice_before_end(t_vars *box, char *line);
void	when_wall(t_vars *box, char *line);
void	when_wall_two(t_vars *box, char *line);
void	reading_map(t_vars *box, char *line);
char	**ft_parser(int fd, t_vars *box);
void	check_place_player(t_vars *box);
void	ft_check_str(char **arr_map, t_vars *box);
void	check_map_j_i_two(char **arr_map, t_vars *box, int j);
void	check_map_j_i(char **arr_map, t_vars *box, int j, int i);
char	**check_map(char **arr_map, t_vars *box);
int		when_len_now(t_vars *box, int i, int j, char **arr_map);
void	*init_bitmap54(t_vars *box);
void	do_screenshot(t_vars *box);
void	order_and_distance(t_vars *box, int *spriteOrder \
, double *spriteDistance);
void	init_for_sprite(t_vars *box, int *spriteOrder, int i);
void	loop_vertical_two(t_vars *box, int y);
void	loop_vertical_pride_stripe(t_vars *box);
void	sprite_from_player(t_vars *box, int	*spriteOrder);
int		ft_check_two(t_vars *box, int y);
void	ft_check_sprite(t_vars *box);
void	ft_sprites(t_vars *box);
void	memory_zbuf(t_vars *box);
void	ft_count_sprite(t_vars *box);
void	sort_order(t_data *orders, t_vars *box);
void	sortSprites(int *spriteOrder, double *spriteDistance, \
t_vars *box);
void	memory_sprites(t_vars *box);
void	texsture_open_or_no(t_vars *box, int fd, char *path);
void	check_after_and_before_path(t_vars *box, char *path);
int		direction_n_s(t_vars *box);
int		direction_e_w(t_vars *box);
void	img_texture(t_vars *box, char *path);
void	init_img_all_texture(t_vars *box);
int		the_end(void);
void	turn_to_the_left(t_vars *box);
void	turn_to_the_right(t_vars *box);
int		ft_key_press(int keycode, t_vars *box);
void	go_forward(t_vars *box);
void	go_back(t_vars *box);
void	go_left(t_vars *box);
void	go_right(t_vars *box);
char	*ft_strchr(const char *s, int c);
int		ft_strncmp(const char *s1, const char *s2, size_t n);
char	**ft_split(char const *s, char c);
char	*ft_strjoin(char *s1, char const *s2);
void	floor_reading_if_all_ok(char *line, int i, t_vars *box);
void	ceilling_reading_if_all_ok(char *line, int i, t_vars *box);
void	check_extension(t_vars	*box, char *argv);
void	chech_fd(int fd);

#endif
